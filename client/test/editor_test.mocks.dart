// Mocks generated by Mockito 5.4.4 from annotations
// in mgp_client/test/editor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:mgp_client/blones/app_blone.dart' as _i3;
import 'package:mgp_client/blones/collection/animation_collection_blones.dart'
    as _i12;
import 'package:mgp_client/blones/collection/atelier_collection_blones.dart'
    as _i13;
import 'package:mgp_client/blones/collection/demarche_collection_blone.dart'
    as _i10;
import 'package:mgp_client/blones/collection/entreprise_collection_blones.dart'
    as _i16;
import 'package:mgp_client/blones/collection/fiche_collection_blone.dart'
    as _i14;
import 'package:mgp_client/blones/collection/flux_collection_blone.dart'
    as _i17;
import 'package:mgp_client/blones/collection/personne_collection_blone.dart'
    as _i6;
import 'package:mgp_client/blones/collection/synergie_collection_blone.dart'
    as _i18;
import 'package:mgp_client/models/authentication.dart' as _i11;
import 'package:mgp_client/models/donnees.dart' as _i4;
import 'package:mgp_client/models/editables.dart' as _i15;
import 'package:mgp_client/models/snippets.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_1 extends _i1.SmartFake
    implements _i2.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppBlone_2 extends _i1.SmartFake implements _i3.AppBlone {
  _FakeAppBlone_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePersonne_3 extends _i1.SmartFake implements _i4.Personne {
  _FakePersonne_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDemarche_4 extends _i1.SmartFake implements _i4.Demarche {
  _FakeDemarche_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimateur_5 extends _i1.SmartFake implements _i4.Animateur {
  _FakeAnimateur_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimateurSnippet_6 extends _i1.SmartFake
    implements _i5.AnimateurSnippet {
  _FakeAnimateurSnippet_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoAnimateur_7 extends _i1.SmartFake implements _i4.CoAnimateur {
  _FakeCoAnimateur_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoAnimateurSnippet_8 extends _i1.SmartFake
    implements _i5.CoAnimateurSnippet {
  _FakeCoAnimateurSnippet_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAtelier_9 extends _i1.SmartFake implements _i4.Atelier {
  _FakeAtelier_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAtelierSnippet_10 extends _i1.SmartFake
    implements _i5.AtelierSnippet {
  _FakeAtelierSnippet_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFiche_11 extends _i1.SmartFake implements _i4.Fiche {
  _FakeFiche_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFicheSnippet_12 extends _i1.SmartFake implements _i5.FicheSnippet {
  _FakeFicheSnippet_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEntreprise_13 extends _i1.SmartFake implements _i4.Entreprise {
  _FakeEntreprise_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEntrepriseSnippet_14 extends _i1.SmartFake
    implements _i5.EntrepriseSnippet {
  _FakeEntrepriseSnippet_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEtablissement_15 extends _i1.SmartFake implements _i4.Etablissement {
  _FakeEtablissement_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContact_16 extends _i1.SmartFake implements _i4.Contact {
  _FakeContact_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContactSnippet_17 extends _i1.SmartFake
    implements _i5.ContactSnippet {
  _FakeContactSnippet_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlux_18 extends _i1.SmartFake implements _i4.Flux {
  _FakeFlux_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFluxSnippet_19 extends _i1.SmartFake implements _i5.FluxSnippet {
  _FakeFluxSnippet_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSynergie_20 extends _i1.SmartFake implements _i4.Synergie {
  _FakeSynergie_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSynergieSnippet_21 extends _i1.SmartFake
    implements _i5.SynergieSnippet {
  _FakeSynergieSnippet_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PersonneCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersonneCollectionBlone extends _i1.Mock
    implements _i6.PersonneCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Personne elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakePersonne_3(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakePersonne_3(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Personne);

  @override
  Map<String, dynamic> elementToJson(_i4.Personne? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Personne create({required String? demarcheId}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _FakePersonne_3(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
        returnValueForMissingStub: _FakePersonne_3(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
      ) as _i4.Personne);

  @override
  _i8.Future<bool> insert(List<_i4.Personne>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Personne? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Personne> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Personne>.value(_FakePersonne_3(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Personne>.value(_FakePersonne_3(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Personne>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DemarcheCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockDemarcheCollectionBlone extends _i1.Mock
    implements _i10.DemarcheCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Demarche elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeDemarche_4(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeDemarche_4(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Demarche);

  @override
  Map<String, dynamic> elementToJson(_i4.Demarche? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Demarche create() => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
        ),
        returnValue: _FakeDemarche_4(
          this,
          Invocation.method(
            #create,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDemarche_4(
          this,
          Invocation.method(
            #create,
            [],
          ),
        ),
      ) as _i4.Demarche);

  @override
  _i8.Future<Iterable<_i4.Demarche>> getMine() => (super.noSuchMethod(
        Invocation.method(
          #getMine,
          [],
        ),
        returnValue: _i8.Future<Iterable<_i4.Demarche>>.value(<_i4.Demarche>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i4.Demarche>>.value(<_i4.Demarche>[]),
      ) as _i8.Future<Iterable<_i4.Demarche>>);

  @override
  _i8.Future<bool> acceptInvitation(_i11.Invitation? invitation) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptInvitation,
          [invitation],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> insert(List<_i4.Demarche>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Demarche? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Demarche> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Demarche>.value(_FakeDemarche_4(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Demarche>.value(_FakeDemarche_4(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Demarche>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnimateurCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimateurCollectionBlone extends _i1.Mock
    implements _i12.AnimateurCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Animateur elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeAnimateur_5(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeAnimateur_5(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Animateur);

  @override
  Map<String, dynamic> elementToJson(_i4.Animateur? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Animateur create({required String? demarcheId}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _FakeAnimateur_5(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
        returnValueForMissingStub: _FakeAnimateur_5(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
      ) as _i4.Animateur);

  @override
  _i8.Future<_i5.AnimateurSnippet> getSnippet(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [id],
        ),
        returnValue:
            _i8.Future<_i5.AnimateurSnippet>.value(_FakeAnimateurSnippet_6(
          this,
          Invocation.method(
            #getSnippet,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.AnimateurSnippet>.value(_FakeAnimateurSnippet_6(
          this,
          Invocation.method(
            #getSnippet,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.AnimateurSnippet>);

  @override
  _i8.Future<Iterable<_i5.AnimateurSnippet>> search({
    required String? demarcheId,
    String? needle = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #demarcheId: demarcheId,
            #needle: needle,
          },
        ),
        returnValue: _i8.Future<Iterable<_i5.AnimateurSnippet>>.value(
            <_i5.AnimateurSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.AnimateurSnippet>>.value(
                <_i5.AnimateurSnippet>[]),
      ) as _i8.Future<Iterable<_i5.AnimateurSnippet>>);

  @override
  _i8.Future<Iterable<_i5.AnimateurSnippet>> getSnippets(
          {required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippets,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<Iterable<_i5.AnimateurSnippet>>.value(
            <_i5.AnimateurSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.AnimateurSnippet>>.value(
                <_i5.AnimateurSnippet>[]),
      ) as _i8.Future<Iterable<_i5.AnimateurSnippet>>);

  @override
  _i8.Future<bool> claim({required String? animateurId}) => (super.noSuchMethod(
        Invocation.method(
          #claim,
          [],
          {#animateurId: animateurId},
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> insert(List<_i4.Animateur>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Animateur? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Animateur> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Animateur>.value(_FakeAnimateur_5(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Animateur>.value(_FakeAnimateur_5(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Animateur>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoAnimateurCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoAnimateurCollectionBlone extends _i1.Mock
    implements _i12.CoAnimateurCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.CoAnimateur elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeCoAnimateur_7(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeCoAnimateur_7(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.CoAnimateur);

  @override
  Map<String, dynamic> elementToJson(_i4.CoAnimateur? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.CoAnimateur create({required String? demarcheId}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _FakeCoAnimateur_7(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
        returnValueForMissingStub: _FakeCoAnimateur_7(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
      ) as _i4.CoAnimateur);

  @override
  _i8.Future<_i5.CoAnimateurSnippet> getSnippet(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [id],
        ),
        returnValue:
            _i8.Future<_i5.CoAnimateurSnippet>.value(_FakeCoAnimateurSnippet_8(
          this,
          Invocation.method(
            #getSnippet,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.CoAnimateurSnippet>.value(_FakeCoAnimateurSnippet_8(
          this,
          Invocation.method(
            #getSnippet,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.CoAnimateurSnippet>);

  @override
  _i8.Future<Iterable<_i5.CoAnimateurSnippet>> search({
    required String? demarcheId,
    String? needle = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #demarcheId: demarcheId,
            #needle: needle,
          },
        ),
        returnValue: _i8.Future<Iterable<_i5.CoAnimateurSnippet>>.value(
            <_i5.CoAnimateurSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.CoAnimateurSnippet>>.value(
                <_i5.CoAnimateurSnippet>[]),
      ) as _i8.Future<Iterable<_i5.CoAnimateurSnippet>>);

  @override
  _i8.Future<Iterable<_i5.CoAnimateurSnippet>> getSnippets(
          {required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippets,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<Iterable<_i5.CoAnimateurSnippet>>.value(
            <_i5.CoAnimateurSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.CoAnimateurSnippet>>.value(
                <_i5.CoAnimateurSnippet>[]),
      ) as _i8.Future<Iterable<_i5.CoAnimateurSnippet>>);

  @override
  _i8.Future<bool> claim({required String? coAnimateurId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #claim,
          [],
          {#coAnimateurId: coAnimateurId},
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> insert(List<_i4.CoAnimateur>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.CoAnimateur? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.CoAnimateur> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.CoAnimateur>.value(_FakeCoAnimateur_7(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.CoAnimateur>.value(_FakeCoAnimateur_7(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.CoAnimateur>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AtelierCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockAtelierCollectionBlone extends _i1.Mock
    implements _i13.AtelierCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Atelier elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeAtelier_9(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeAtelier_9(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Atelier);

  @override
  Map<String, dynamic> elementToJson(_i4.Atelier? value) => (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Atelier create({
    required String? demarcheId,
    String? animateurId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #demarcheId: demarcheId,
            #animateurId: animateurId,
          },
        ),
        returnValue: _FakeAtelier_9(
          this,
          Invocation.method(
            #create,
            [],
            {
              #demarcheId: demarcheId,
              #animateurId: animateurId,
            },
          ),
        ),
        returnValueForMissingStub: _FakeAtelier_9(
          this,
          Invocation.method(
            #create,
            [],
            {
              #demarcheId: demarcheId,
              #animateurId: animateurId,
            },
          ),
        ),
      ) as _i4.Atelier);

  @override
  _i8.Future<_i5.AtelierSnippet> getSnippet({required String? atelierId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [],
          {#atelierId: atelierId},
        ),
        returnValue:
            _i8.Future<_i5.AtelierSnippet>.value(_FakeAtelierSnippet_10(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#atelierId: atelierId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.AtelierSnippet>.value(_FakeAtelierSnippet_10(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#atelierId: atelierId},
          ),
        )),
      ) as _i8.Future<_i5.AtelierSnippet>);

  @override
  _i8.Stream<_i5.AtelierSnippet> createSnippet({
    required String? demarcheId,
    String? animateurId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSnippet,
          [],
          {
            #demarcheId: demarcheId,
            #animateurId: animateurId,
          },
        ),
        returnValue: _i8.Stream<_i5.AtelierSnippet>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.AtelierSnippet>.empty(),
      ) as _i8.Stream<_i5.AtelierSnippet>);

  @override
  _i8.Stream<_i5.AtelierSnippet> subscribeToSnippet(String? atelierId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToSnippet,
          [atelierId],
        ),
        returnValue: _i8.Stream<_i5.AtelierSnippet>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.AtelierSnippet>.empty(),
      ) as _i8.Stream<_i5.AtelierSnippet>);

  @override
  _i8.Stream<_i4.Atelier> subscribe(String? atelierId) => (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [atelierId],
        ),
        returnValue: _i8.Stream<_i4.Atelier>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.Atelier>.empty(),
      ) as _i8.Stream<_i4.Atelier>);

  @override
  _i8.Future<List<_i4.Atelier>> getAll({required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<List<_i4.Atelier>>.value(<_i4.Atelier>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i4.Atelier>>.value(<_i4.Atelier>[]),
      ) as _i8.Future<List<_i4.Atelier>>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Atelier? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> insert(List<_i4.Atelier>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Atelier> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Atelier>.value(_FakeAtelier_9(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i4.Atelier>.value(_FakeAtelier_9(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Atelier>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FicheCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockFicheCollectionBlone extends _i1.Mock
    implements _i14.FicheCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Fiche elementFromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeFiche_11(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeFiche_11(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Fiche);

  @override
  Map<String, dynamic> elementToJson(_i4.Fiche? value) => (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Fiche create({
    required String? atelierId,
    required String? contactId,
    required String? demarcheId,
    required String? fluxId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #atelierId: atelierId,
            #contactId: contactId,
            #demarcheId: demarcheId,
            #fluxId: fluxId,
          },
        ),
        returnValue: _FakeFiche_11(
          this,
          Invocation.method(
            #create,
            [],
            {
              #atelierId: atelierId,
              #contactId: contactId,
              #demarcheId: demarcheId,
              #fluxId: fluxId,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFiche_11(
          this,
          Invocation.method(
            #create,
            [],
            {
              #atelierId: atelierId,
              #contactId: contactId,
              #demarcheId: demarcheId,
              #fluxId: fluxId,
            },
          ),
        ),
      ) as _i4.Fiche);

  @override
  _i8.Future<Iterable<_i5.FicheSnippet>> getSnippetsForContactAndAtelier({
    required String? atelierId,
    required String? contactId,
    required String? demarcheId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippetsForContactAndAtelier,
          [],
          {
            #atelierId: atelierId,
            #contactId: contactId,
            #demarcheId: demarcheId,
          },
        ),
        returnValue:
            _i8.Future<Iterable<_i5.FicheSnippet>>.value(<_i5.FicheSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.FicheSnippet>>.value(<_i5.FicheSnippet>[]),
      ) as _i8.Future<Iterable<_i5.FicheSnippet>>);

  @override
  _i8.Future<Iterable<_i4.Fiche>> getForContactAndAtelier({
    required String? atelierId,
    required String? contactId,
    required String? demarcheId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForContactAndAtelier,
          [],
          {
            #atelierId: atelierId,
            #contactId: contactId,
            #demarcheId: demarcheId,
          },
        ),
        returnValue: _i8.Future<Iterable<_i4.Fiche>>.value(<_i4.Fiche>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i4.Fiche>>.value(<_i4.Fiche>[]),
      ) as _i8.Future<Iterable<_i4.Fiche>>);

  @override
  _i8.Future<_i5.FicheSnippet> getSnippet({required String? ficheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [],
          {#ficheId: ficheId},
        ),
        returnValue: _i8.Future<_i5.FicheSnippet>.value(_FakeFicheSnippet_12(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#ficheId: ficheId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.FicheSnippet>.value(_FakeFicheSnippet_12(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#ficheId: ficheId},
          ),
        )),
      ) as _i8.Future<_i5.FicheSnippet>);

  @override
  _i8.Stream<_i5.FicheSnippet> createSnippet({
    required String? demarcheId,
    required String? atelierId,
    required String? contactId,
    required String? etablissementId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSnippet,
          [],
          {
            #demarcheId: demarcheId,
            #atelierId: atelierId,
            #contactId: contactId,
            #etablissementId: etablissementId,
          },
        ),
        returnValue: _i8.Stream<_i5.FicheSnippet>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.FicheSnippet>.empty(),
      ) as _i8.Stream<_i5.FicheSnippet>);

  @override
  _i8.Future<void> createMirrors(
    _i4.Fiche? fiche,
    _i4.Flux? flux,
    _i5.ContactSnippet? contact,
    List<_i5.ContactSnippet>? participants,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMirrors,
          [
            fiche,
            flux,
            contact,
            participants,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<_i5.FicheSnippet> subscribeToSnippet(String? ficheId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToSnippet,
          [ficheId],
        ),
        returnValue: _i8.Stream<_i5.FicheSnippet>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.FicheSnippet>.empty(),
      ) as _i8.Stream<_i5.FicheSnippet>);

  @override
  _i8.Stream<_i4.Fiche> subscribe(String? ficheId) => (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [ficheId],
        ),
        returnValue: _i8.Stream<_i4.Fiche>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.Fiche>.empty(),
      ) as _i8.Stream<_i4.Fiche>);

  @override
  _i8.Stream<Iterable<_i4.Fiche>> subscribeByAtelier(
          {required String? atelierId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeByAtelier,
          [],
          {#atelierId: atelierId},
        ),
        returnValue: _i8.Stream<Iterable<_i4.Fiche>>.empty(),
        returnValueForMissingStub: _i8.Stream<Iterable<_i4.Fiche>>.empty(),
      ) as _i8.Stream<Iterable<_i4.Fiche>>);

  @override
  _i8.Future<void> saveEditables({
    required _i15.EditableFiche? fiche,
    required _i15.EditableFlux? flux,
    required _i5.ContactSnippet? contact,
    required List<_i5.ContactSnippet>? mirrorParticipants,
    _i15.EditableParticipantMeta? meta,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveEditables,
          [],
          {
            #fiche: fiche,
            #flux: flux,
            #contact: contact,
            #mirrorParticipants: mirrorParticipants,
            #meta: meta,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> insert(List<_i4.Fiche>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Fiche? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Fiche> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Fiche>.value(_FakeFiche_11(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i4.Fiche>.value(_FakeFiche_11(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Fiche>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EntrepriseCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntrepriseCollectionBlone extends _i1.Mock
    implements _i16.EntrepriseCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Entreprise create({required String? demarcheId}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _FakeEntreprise_13(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
        returnValueForMissingStub: _FakeEntreprise_13(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
      ) as _i4.Entreprise);

  @override
  _i4.Entreprise elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeEntreprise_13(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeEntreprise_13(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Entreprise);

  @override
  Map<String, dynamic> elementToJson(_i4.Entreprise? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<_i5.EntrepriseSnippet> getSnippet(
          {required String? entrepriseId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [],
          {#entrepriseId: entrepriseId},
        ),
        returnValue:
            _i8.Future<_i5.EntrepriseSnippet>.value(_FakeEntrepriseSnippet_14(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#entrepriseId: entrepriseId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.EntrepriseSnippet>.value(_FakeEntrepriseSnippet_14(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#entrepriseId: entrepriseId},
          ),
        )),
      ) as _i8.Future<_i5.EntrepriseSnippet>);

  @override
  _i8.Future<_i4.Entreprise> getByEtablissementId(String? etablissementId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEtablissementId,
          [etablissementId],
        ),
        returnValue: _i8.Future<_i4.Entreprise>.value(_FakeEntreprise_13(
          this,
          Invocation.method(
            #getByEtablissementId,
            [etablissementId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Entreprise>.value(_FakeEntreprise_13(
          this,
          Invocation.method(
            #getByEtablissementId,
            [etablissementId],
          ),
        )),
      ) as _i8.Future<_i4.Entreprise>);

  @override
  _i8.Future<Iterable<_i5.EntrepriseSnippet>> getSnippets(
          {required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippets,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<Iterable<_i5.EntrepriseSnippet>>.value(
            <_i5.EntrepriseSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.EntrepriseSnippet>>.value(
                <_i5.EntrepriseSnippet>[]),
      ) as _i8.Future<Iterable<_i5.EntrepriseSnippet>>);

  @override
  _i8.Future<Iterable<_i5.EntrepriseSnippet>> search({
    required String? demarcheId,
    required String? needle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #demarcheId: demarcheId,
            #needle: needle,
          },
        ),
        returnValue: _i8.Future<Iterable<_i5.EntrepriseSnippet>>.value(
            <_i5.EntrepriseSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.EntrepriseSnippet>>.value(
                <_i5.EntrepriseSnippet>[]),
      ) as _i8.Future<Iterable<_i5.EntrepriseSnippet>>);

  @override
  _i8.Future<bool> insert(List<_i4.Entreprise>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Entreprise? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Entreprise> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Entreprise>.value(_FakeEntreprise_13(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Entreprise>.value(_FakeEntreprise_13(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Entreprise>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EtablissementCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockEtablissementCollectionBlone extends _i1.Mock
    implements _i16.EtablissementCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Etablissement elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeEtablissement_15(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeEtablissement_15(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Etablissement);

  @override
  Map<String, dynamic> elementToJson(_i4.Etablissement? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Etablissement create({
    required String? demarcheId,
    required String? entrepriseId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #demarcheId: demarcheId,
            #entrepriseId: entrepriseId,
          },
        ),
        returnValue: _FakeEtablissement_15(
          this,
          Invocation.method(
            #create,
            [],
            {
              #demarcheId: demarcheId,
              #entrepriseId: entrepriseId,
            },
          ),
        ),
        returnValueForMissingStub: _FakeEtablissement_15(
          this,
          Invocation.method(
            #create,
            [],
            {
              #demarcheId: demarcheId,
              #entrepriseId: entrepriseId,
            },
          ),
        ),
      ) as _i4.Etablissement);

  @override
  _i8.Future<Iterable<_i4.Etablissement>> getOrCreateByEntrepriseId({
    required String? demarcheId,
    required String? entrepriseId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrCreateByEntrepriseId,
          [],
          {
            #demarcheId: demarcheId,
            #entrepriseId: entrepriseId,
          },
        ),
        returnValue: _i8.Future<Iterable<_i4.Etablissement>>.value(
            <_i4.Etablissement>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i4.Etablissement>>.value(
                <_i4.Etablissement>[]),
      ) as _i8.Future<Iterable<_i4.Etablissement>>);

  @override
  _i8.Future<bool> insert(List<_i4.Etablissement>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Etablissement? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Etablissement> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Etablissement>.value(_FakeEtablissement_15(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Etablissement>.value(_FakeEtablissement_15(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Etablissement>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ContactCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactCollectionBlone extends _i1.Mock
    implements _i16.ContactCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Contact elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeContact_16(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeContact_16(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Contact);

  @override
  Map<String, dynamic> elementToJson(_i4.Contact? value) => (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Contact create({
    required String? personneId,
    required dynamic demarcheId,
    required dynamic etablissementId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #personneId: personneId,
            #demarcheId: demarcheId,
            #etablissementId: etablissementId,
          },
        ),
        returnValue: _FakeContact_16(
          this,
          Invocation.method(
            #create,
            [],
            {
              #personneId: personneId,
              #demarcheId: demarcheId,
              #etablissementId: etablissementId,
            },
          ),
        ),
        returnValueForMissingStub: _FakeContact_16(
          this,
          Invocation.method(
            #create,
            [],
            {
              #personneId: personneId,
              #demarcheId: demarcheId,
              #etablissementId: etablissementId,
            },
          ),
        ),
      ) as _i4.Contact);

  @override
  _i8.Future<Iterable<_i5.ContactSnippet>> getSnippets(
          {required dynamic demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippets,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<Iterable<_i5.ContactSnippet>>.value(
            <_i5.ContactSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.ContactSnippet>>.value(
                <_i5.ContactSnippet>[]),
      ) as _i8.Future<Iterable<_i5.ContactSnippet>>);

  @override
  _i8.Future<Iterable<_i5.ContactSnippet>> getSnippetsForEtablissement(
          {required dynamic etablissementId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippetsForEtablissement,
          [],
          {#etablissementId: etablissementId},
        ),
        returnValue: _i8.Future<Iterable<_i5.ContactSnippet>>.value(
            <_i5.ContactSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.ContactSnippet>>.value(
                <_i5.ContactSnippet>[]),
      ) as _i8.Future<Iterable<_i5.ContactSnippet>>);

  @override
  _i8.Future<Iterable<_i5.ContactSnippet>> search({
    required dynamic demarcheId,
    required String? needle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #demarcheId: demarcheId,
            #needle: needle,
          },
        ),
        returnValue: _i8.Future<Iterable<_i5.ContactSnippet>>.value(
            <_i5.ContactSnippet>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i5.ContactSnippet>>.value(
                <_i5.ContactSnippet>[]),
      ) as _i8.Future<Iterable<_i5.ContactSnippet>>);

  @override
  _i8.Future<_i5.ContactSnippet> getSnippet({required String? contactId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [],
          {#contactId: contactId},
        ),
        returnValue:
            _i8.Future<_i5.ContactSnippet>.value(_FakeContactSnippet_17(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#contactId: contactId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.ContactSnippet>.value(_FakeContactSnippet_17(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#contactId: contactId},
          ),
        )),
      ) as _i8.Future<_i5.ContactSnippet>);

  @override
  _i8.Future<_i5.ContactSnippet> createSnippet({
    required String? demarcheId,
    required String? etablissementId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSnippet,
          [],
          {
            #demarcheId: demarcheId,
            #etablissementId: etablissementId,
          },
        ),
        returnValue:
            _i8.Future<_i5.ContactSnippet>.value(_FakeContactSnippet_17(
          this,
          Invocation.method(
            #createSnippet,
            [],
            {
              #demarcheId: demarcheId,
              #etablissementId: etablissementId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.ContactSnippet>.value(_FakeContactSnippet_17(
          this,
          Invocation.method(
            #createSnippet,
            [],
            {
              #demarcheId: demarcheId,
              #etablissementId: etablissementId,
            },
          ),
        )),
      ) as _i8.Future<_i5.ContactSnippet>);

  @override
  _i8.Future<bool> insert(List<_i4.Contact>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Contact? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Contact> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Contact>.value(_FakeContact_16(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Contact>.value(_FakeContact_16(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Contact>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FluxCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockFluxCollectionBlone extends _i1.Mock
    implements _i17.FluxCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Flux elementFromJson(Map<String, dynamic>? json) => (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeFlux_18(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeFlux_18(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Flux);

  @override
  Map<String, dynamic> elementToJson(_i4.Flux? value) => (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Flux create({
    required String? demarcheId,
    required String? contactId,
    required String? atelierId,
    required String? etablissementId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #demarcheId: demarcheId,
            #contactId: contactId,
            #atelierId: atelierId,
            #etablissementId: etablissementId,
          },
        ),
        returnValue: _FakeFlux_18(
          this,
          Invocation.method(
            #create,
            [],
            {
              #demarcheId: demarcheId,
              #contactId: contactId,
              #atelierId: atelierId,
              #etablissementId: etablissementId,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFlux_18(
          this,
          Invocation.method(
            #create,
            [],
            {
              #demarcheId: demarcheId,
              #contactId: contactId,
              #atelierId: atelierId,
              #etablissementId: etablissementId,
            },
          ),
        ),
      ) as _i4.Flux);

  @override
  _i8.Future<List<_i4.Flux>> getAll({required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<List<_i4.Flux>>.value(<_i4.Flux>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i4.Flux>>.value(<_i4.Flux>[]),
      ) as _i8.Future<List<_i4.Flux>>);

  @override
  _i8.Future<Iterable<_i4.Flux>> search({
    required dynamic demarcheId,
    required String? needle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #demarcheId: demarcheId,
            #needle: needle,
          },
        ),
        returnValue: _i8.Future<Iterable<_i4.Flux>>.value(<_i4.Flux>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i4.Flux>>.value(<_i4.Flux>[]),
      ) as _i8.Future<Iterable<_i4.Flux>>);

  @override
  _i8.Future<_i5.FluxSnippet> getSnippet({required String? fluxId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [],
          {#fluxId: fluxId},
        ),
        returnValue: _i8.Future<_i5.FluxSnippet>.value(_FakeFluxSnippet_19(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#fluxId: fluxId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.FluxSnippet>.value(_FakeFluxSnippet_19(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#fluxId: fluxId},
          ),
        )),
      ) as _i8.Future<_i5.FluxSnippet>);

  @override
  _i8.Future<_i5.FluxSnippet> createSnippet({
    required String? demarcheId,
    required String? contactId,
    required String? atelierId,
    required String? etablissementId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSnippet,
          [],
          {
            #demarcheId: demarcheId,
            #contactId: contactId,
            #atelierId: atelierId,
            #etablissementId: etablissementId,
          },
        ),
        returnValue: _i8.Future<_i5.FluxSnippet>.value(_FakeFluxSnippet_19(
          this,
          Invocation.method(
            #createSnippet,
            [],
            {
              #demarcheId: demarcheId,
              #contactId: contactId,
              #atelierId: atelierId,
              #etablissementId: etablissementId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.FluxSnippet>.value(_FakeFluxSnippet_19(
          this,
          Invocation.method(
            #createSnippet,
            [],
            {
              #demarcheId: demarcheId,
              #contactId: contactId,
              #atelierId: atelierId,
              #etablissementId: etablissementId,
            },
          ),
        )),
      ) as _i8.Future<_i5.FluxSnippet>);

  @override
  _i8.Future<bool> insert(List<_i4.Flux>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Flux? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Flux> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Flux>.value(_FakeFlux_18(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i4.Flux>.value(_FakeFlux_18(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Flux>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SynergieCollectionBlone].
///
/// See the documentation for Mockito's code generation for more information.
class MockSynergieCollectionBlone extends _i1.Mock
    implements _i18.SynergieCollectionBlone {
  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  _i2.SupabaseQueryBuilder get fromTable => (super.noSuchMethod(
        Invocation.getter(#fromTable),
        returnValue: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
        returnValueForMissingStub: _FakeSupabaseQueryBuilder_1(
          this,
          Invocation.getter(#fromTable),
        ),
      ) as _i2.SupabaseQueryBuilder);

  @override
  _i3.AppBlone get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeAppBlone_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i3.AppBlone);

  @override
  set parent(_i3.AppBlone? _parent) => super.noSuchMethod(
        Invocation.setter(
          #parent,
          _parent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Synergie elementFromJson(Map<String, dynamic>? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementFromJson,
          [json],
        ),
        returnValue: _FakeSynergie_20(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
        returnValueForMissingStub: _FakeSynergie_20(
          this,
          Invocation.method(
            #elementFromJson,
            [json],
          ),
        ),
      ) as _i4.Synergie);

  @override
  Map<String, dynamic> elementToJson(_i4.Synergie? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #elementToJson,
          [value],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Synergie create({required String? demarcheId}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _FakeSynergie_20(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
        returnValueForMissingStub: _FakeSynergie_20(
          this,
          Invocation.method(
            #create,
            [],
            {#demarcheId: demarcheId},
          ),
        ),
      ) as _i4.Synergie);

  @override
  _i8.Future<List<_i4.Synergie>> getAll({required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Future<List<_i4.Synergie>>.value(<_i4.Synergie>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i4.Synergie>>.value(<_i4.Synergie>[]),
      ) as _i8.Future<List<_i4.Synergie>>);

  @override
  _i8.Future<Iterable<_i4.Synergie>> search({
    required String? demarcheId,
    required String? needle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #demarcheId: demarcheId,
            #needle: needle,
          },
        ),
        returnValue: _i8.Future<Iterable<_i4.Synergie>>.value(<_i4.Synergie>[]),
        returnValueForMissingStub:
            _i8.Future<Iterable<_i4.Synergie>>.value(<_i4.Synergie>[]),
      ) as _i8.Future<Iterable<_i4.Synergie>>);

  @override
  _i8.Future<_i5.SynergieSnippet> getSnippet({required String? fluxId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSnippet,
          [],
          {#fluxId: fluxId},
        ),
        returnValue:
            _i8.Future<_i5.SynergieSnippet>.value(_FakeSynergieSnippet_21(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#fluxId: fluxId},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.SynergieSnippet>.value(_FakeSynergieSnippet_21(
          this,
          Invocation.method(
            #getSnippet,
            [],
            {#fluxId: fluxId},
          ),
        )),
      ) as _i8.Future<_i5.SynergieSnippet>);

  @override
  _i8.Stream<_i4.Synergie> subscribe(String? synergieId) => (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [synergieId],
        ),
        returnValue: _i8.Stream<_i4.Synergie>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.Synergie>.empty(),
      ) as _i8.Stream<_i4.Synergie>);

  @override
  _i8.Stream<_i5.SynergieSnippet> subscribeToSnippet(String? synergieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToSnippet,
          [synergieId],
        ),
        returnValue: _i8.Stream<_i5.SynergieSnippet>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.SynergieSnippet>.empty(),
      ) as _i8.Stream<_i5.SynergieSnippet>);

  @override
  _i8.Stream<_i5.SynergieSnippet> createSnippet(
          {required String? demarcheId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSnippet,
          [],
          {#demarcheId: demarcheId},
        ),
        returnValue: _i8.Stream<_i5.SynergieSnippet>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.SynergieSnippet>.empty(),
      ) as _i8.Stream<_i5.SynergieSnippet>);

  @override
  _i8.Future<bool> insert(List<_i4.Synergie>? values) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> save(_i4.Synergie? value) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [value],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i4.Synergie> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i8.Future<_i4.Synergie>.value(_FakeSynergie_20(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Synergie>.value(_FakeSynergie_20(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Synergie>);

  @override
  _i8.Future<bool> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> mount() => (super.noSuchMethod(
        Invocation.method(
          #mount,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void seed() => super.noSuchMethod(
        Invocation.method(
          #seed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
